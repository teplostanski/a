#!/bin/sh
set -e

REPO="teplostanski/nosudopass"
APP="nosudopass"
INSTALL_DIR="${HOME}/.local/bin"
TMP_DIR="/tmp/nosudopass_install_$$"

cleanup() {
    rm -rf "${TMP_DIR}"
}
trap cleanup EXIT INT TERM

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
mkdir -p "${TMP_DIR}"

if [ "${1}" = "--global" ]; then
    INSTALL_DIR="/usr/local/bin"
fi

ARCH=$(uname -m)
case "${ARCH}" in
    x86_64)   GOARCH="amd64" ;;
    aarch64)  GOARCH="arm64" ;;
    arm64)    GOARCH="arm64" ;;
    *)
        echo "‚ùå Unsupported architecture: ${ARCH}"
        cleanup
        exit 1
        ;;
esac

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ curl
if ! command -v curl >/dev/null 2>&1; then
    echo "‚ùå curl is required but not installed"
    cleanup
    exit 1
fi

echo "üì• Fetching latest release info for ${GOARCH}..."

# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ª–∏–∑–µ
RELEASE_JSON=$(curl -s "https://api.github.com/repos/${REPO}/releases/latest")

# –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ —Ç–µ–≥–∞
VERSION=$(echo "${RELEASE_JSON}" | grep '"tag_name"' | cut -d'"' -f4 | sed 's/^v//')

if [ -z "${VERSION}" ]; then
    echo "‚ùå Could not determine latest version"
    exit 1
fi

# –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤–µ—Ä—Å–∏–µ–π
BINARY_FILE="${APP}_${VERSION}_linux_${GOARCH}.tar.gz"
CHECKSUMS_FILE="${APP}_${VERSION}_checksums.txt"

# –ù–∞—Ö–æ–¥–∏–º URL –¥–ª—è –±–∏–Ω–∞—Ä–Ω–∏–∫–∞
URL=$(echo "${RELEASE_JSON}" \
    | grep "browser_download_url.*${BINARY_FILE}\"" \
    | cut -d '"' -f 4)

if [ -z "${URL}" ]; then
    echo "‚ùå Binary ${BINARY_FILE} not found"
    exit 1
fi

# –ù–∞—Ö–æ–¥–∏–º URL –¥–ª—è —á–µ–∫—Å—É–º–º
CHECKSUMS_URL=$(echo "${RELEASE_JSON}" \
    | grep "browser_download_url.*checksums\\.txt\"" \
    | cut -d '"' -f 4)

echo "‚¨áÔ∏è Downloading..."
if ! curl -L "${URL}" -o "${TMP_DIR}/${BINARY_FILE}"; then
    echo "‚ùå Download failed"
    exit 1
fi

# –°–∫–∞—á–∏–≤–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫—Å—É–º–º—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if [ -n "${CHECKSUMS_URL}" ] && command -v sha256sum >/dev/null 2>&1; then
    echo "üîç Downloading and verifying checksums..."
    
    if curl -L "${CHECKSUMS_URL}" -o "${TMP_DIR}/checksums.txt" 2>/dev/null; then
        EXPECTED_CHECKSUM=$(grep "${BINARY_FILE}" "${TMP_DIR}/checksums.txt" 2>/dev/null | cut -d' ' -f1)
        
        if [ -n "${EXPECTED_CHECKSUM}" ]; then
            ACTUAL_CHECKSUM=$(sha256sum "${TMP_DIR}/${BINARY_FILE}" | cut -d' ' -f1)
            
            if [ "${ACTUAL_CHECKSUM}" = "${EXPECTED_CHECKSUM}" ]; then
                echo "‚úÖ Checksum verified"
                echo "   Expected: ${EXPECTED_CHECKSUM}"
                echo "   Actual:   ${ACTUAL_CHECKSUM}"
            else
                echo "‚ùå Checksum verification failed!"
                echo "   Expected: ${EXPECTED_CHECKSUM}"
                echo "   Actual:   ${ACTUAL_CHECKSUM}"
                exit 1
            fi
        else
            echo "‚ö†Ô∏è Checksum for ${BINARY_FILE} not found in checksums file"
        fi
    else
        echo "‚ö†Ô∏è Could not download checksums file"
    fi
elif [ -z "${CHECKSUMS_URL}" ]; then
    echo "‚ö†Ô∏è Checksums file not available"
elif ! command -v sha256sum >/dev/null 2>&1; then
    echo "‚ö†Ô∏è sha256sum not found, skipping checksum verification"
fi

echo "üì¶ Extracting..."
if ! tar -xzf "${TMP_DIR}/${BINARY_FILE}" -C "${TMP_DIR}"; then
    echo "‚ùå Extraction failed"
    exit 1
fi

echo "üöö Installing to ${INSTALL_DIR}"
chmod +x "${TMP_DIR}/${APP}"

# –ï—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º sudo, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if [ "${INSTALL_DIR}" = "/usr/local/bin" ]; then
    if [ ! -w "${INSTALL_DIR}" ]; then
        echo "üîë Requires root privileges to write to ${INSTALL_DIR}"
        sudo mv "${TMP_DIR}/${APP}" "${INSTALL_DIR}/${APP}"
    else
        mv "${TMP_DIR}/${APP}" "${INSTALL_DIR}/${APP}"
    fi
else
    mkdir -p "${INSTALL_DIR}"
    mv "${TMP_DIR}/${APP}" "${INSTALL_DIR}/${APP}"
fi

echo "‚úÖ Installed to ${INSTALL_DIR}/${APP}"
